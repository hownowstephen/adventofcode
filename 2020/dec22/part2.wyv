require stdout
import wyvern.collections.list

stdout.print("Hello, Dec 22nd\n")


// could use the list library, but docs are scarce
// val deck = list.make()
// deck.append(1)

// instead I'm stealing from the linked list example for now
tagged resource type Deck comprises Cons, Nil
    
tagged resource type Cons extends Deck
    val value:system.Int
    var next:Deck
    
tagged type Nil extends Deck

val Nil : Nil = new

def Cons(v:Int, n:Deck):Cons = new
    val value = v
    var next:Deck = n

def length(l:LList):Int
    match l:
        n:Nil => 0
        c:Cons => length(c.next)+1

// TODO: would be cleaner with recursive pattern matching, using newElement
def insertAfter(l:LList, locationElement:Int, newElement:Int):Unit = match l:
    n:Nil => unit // not found
    c:Cons => if (c.value == locationElement)
            c.next = Cons(newElement, c.next)
        else
            insertAfter(c.next, locationElement, newElement)

def traverse(l:LList):Unit
    match l:
        n:Nil => unit
        c:Cons =>
            stdout.printInt(c.value)
            traverse(c.next)
            
val aList = Cons(5, Cons(4, Nil))
insertAfter(aList, 5, 3)
traverse(aList)
length(aList)